@page "/IRM"

<PageTitle>IRM</PageTitle>

@using DeepFrees.EmployeeService.Model;
@using DeepFrees.TaskService.Model;
@using DeepFrees.TechnicianService.Model;
@using DeepFrees.WebPro.Model;
@using DeepFrees.WebPro.Services
@inject DispatchSolutionStream DispatchSolutionStream
@inject TechnicianStream TechnicianStream
@inject WorkTaskStream WorkTaskStream

<nav class="breadcrumbs">
    <a href="#home" class="breadcrumbs__item">Home</a>
    <a href="/IRM" class="breadcrumbs__item is-active">IRM</a>
</nav>

<br />
<br />

<h1>IRM</h1>

<p><a href="/IRM">Click Here to Refresh Shuffle</a></p>

@if (SolutionTuple == null || SolutionTuple.Item2 == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Technician Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var AssignedTechs in SolutionTuple.Item2)
            {
                    <tr>
                    <td>@AssignedTechs.firstName</td>
                    <td><a href="@InLink=@AssignedTechs.nic">View Tasks</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Tuple<List<WorkTask>, List<Technician>>? SolutionTuple { get; set; }
    private string InLink = "/IRM/IRMInDetail?NIC"; //

    public class TaskDAO
    {
        public string? EmployeeID { get; set; } //NIC of Technician, Here Employee is Tech
        public string? EmployeeName { get; set; } //NIC of Technician, Here Employee is Tech
        public string? TaskName { get; set; }
        public int TaskID { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        SolutionTuple = await DispatchSolutionStream.ShuffleDisSolutions();
        StateHasChanged();
    }
}
