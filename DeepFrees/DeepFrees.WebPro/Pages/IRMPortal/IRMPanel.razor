@page "/IRM"

<PageTitle>IRM</PageTitle>

@using DeepFrees.EmployeeService.Model;
@using DeepFrees.WebPro.Model;
@using DeepFrees.WebPro.Services
@inject DispatchSolutionStream DispatchSolutionStream
@inject TechnicianStream TechnicianStream
@inject WorkTaskStream WorkTaskStream

<nav class="breadcrumbs">
    <a href="#home" class="breadcrumbs__item">Home</a>
    <a href="/IRM" class="breadcrumbs__item is-active">IRM</a>
</nav>

<br />
<br />

<h1>IRM</h1>

@if (DispatchSolutionsView == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>TaskName Category</th>
                <th>Task Length</th>
                <th>Technician Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var DispatchSolutionViews in DispatchSolutionsView)
            {
                <tr>
                    <td>@DispatchSolutionViews.TaskName</td>
                    <td>@DispatchSolutionViews.TaskLength</td>
                    <td>@DispatchSolutionViews.TechnicianName</td>
                    <td><a href="/">Remove</a></td>
                </tr>
            }
            <tr>
                <td><a href="/Taskboard/Add">Add + </a></td>
                <td> </td>
                <td> </td>
                <td> </td>
                <td> </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private List<DispatchSolutionView>? DispatchSolutionsView;
    private string InLink = "/Employees/EmployeeInDetail?NIC"; //

    public string? EmployeeID { get; set; } //NIC of Technician, Here EMployee is Tech
    public int TaskCategoryID { get; set; }
    public int TaskPoints { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var TechList = await TechnicianStream.GetTechnicianAll();

        List<DispatchRequest> DispatchRequests = new();

        foreach(var Tech in TechList)
        {
            foreach(var wpt in Tech.WorkTaskPointTable)
            {   DispatchRequest dispatchRequest = new();
                dispatchRequest.TaskCategoryID = (int)wpt.TaskCategory;
                dispatchRequest.TaskPoints = wpt.TaskCategoryPoints;
                dispatchRequest.EmployeeID = Tech.NIC;

                DispatchRequests.Add(dispatchRequest);
            }
        }
        var TaskList = await WorkTaskStream.GetWorkTasksAll();
        DispatchSolutionsView = await DispatchSolutionStream.ShuffleDisSolutions(DispatchRequests);
    }
}
